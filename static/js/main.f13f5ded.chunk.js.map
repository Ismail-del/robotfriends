{"version":3,"sources":["serviceWorker.js","component/Card.js","component/CardList.js","component/SearchBox.js","component/Scroll.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","src","CardList","robots","NewRobot","map","item","i","key","console","log","SearchBox","SearchRobot","SearchField","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","onChangeevent","event","setState","searchField","target","value","state","fetch","then","response","json","users","this","filterCase","filter","robot","toLowerCase","includes","React","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCHSC,EAZF,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAAOC,EAAO,EAAPA,GAC3B,OACC,yBAAKC,UAAY,oDAChB,yBAAKC,IAAG,+BAA4BF,EAA5B,cACR,yBAAKC,UAAY,SAChB,4BAAKH,GACL,2BAAIC,MCOOI,EAZE,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACZC,EAAWD,EAAOE,KAAI,SAACC,EAAKC,GACjC,OAAO,kBAAC,EAAD,CAAMC,IAAOD,EAAGV,KAAQM,EAAOI,GAAGV,KAAMC,MAASK,EAAOI,GAAGT,MAAOC,GAAMI,EAAOI,GAAGR,QAG1F,OADAU,QAAQC,IAAIN,GAEX,6BACEA,ICOWO,EAdG,SAAC,GAA8B,EAA7BC,YAA8B,IAAjBC,EAAgB,EAAhBA,YAEhC,OACC,yBAAKb,UAAY,SAChB,wBAAIA,UAAY,MAAhB,gBACA,2BAAOA,UAAY,qCACnBc,KAAO,SACPC,YAAc,gBACdC,SAAYH,MCDAI,G,MARA,SAACC,GACf,OACC,yBAAKC,MAAS,CAACC,SAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACrEJ,EAAMK,YCmCKC,E,kDAhCd,aAAc,IAAD,8BACZ,gBAMDC,cAAgB,SAACC,GAChB,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SANzC,EAAKC,MAAQ,CACZ5B,OAAO,GACPyB,YAAY,IAJD,E,gEAUO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACxB,OAAQiC,S,+BAGhC,IAAD,EACuBC,KAAKN,MAA5B5B,EADA,EACAA,OAAQyB,EADR,EACQA,YACTU,EAAanC,EAAOoC,QAAO,SAAAC,GAChC,OAAOA,EAAM3C,KAAK4C,cAAcC,SAASd,EAAYa,kBAEtD,OACC,6BACC,kBAAC,EAAD,CAAW5B,YAAewB,KAAKZ,gBAC/B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUtB,OAAUmC,U,GA1BPK,IAAMC,WCAxBC,IAASC,OACP,kBAAC,EAAD,MACCC,SAASC,eAAe,SNyHrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL9C,QAAQ8C,MAAMA,EAAMC,a","file":"static/js/main.f13f5ded.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\n\r\n\r\nconst Card = ({name, email, id}) =>{\r\n\treturn(\r\n\t\t<div className = 'bg-light-green dib br3 pa3 ma2 grow bw2 shadow-s'>\r\n\t\t\t<img src = {`https://robohash.org/${id}?200*200`}/>\r\n\t\t\t<div className = 'fc tc'>\r\n\t\t\t\t<h1>{name}</h1>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport { robots } from './Robot';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots})=>{\r\n\tconst NewRobot = robots.map((item,i) => {\r\n\t\treturn <Card key = {i} name = {robots[i].name} email = {robots[i].email} id = {robots[i].id}/>;\r\n\t});\r\n\tconsole.log(NewRobot);\r\n\treturn(\r\n\t\t<div>\r\n\t\t\t{NewRobot}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\n\r\nconst SearchBox = ({SearchRobot, SearchField}) =>{\r\n\r\n\treturn(\r\n\t\t<div className = 'fc tc'>\r\n\t\t\t<h1 className = \"h1\">RobotFriends</h1>\r\n\t\t\t<input className = 'pa3 ba b--green bg -hightest -blue'\r\n\t\t\ttype = 'search'\r\n\t\t\tplaceholder = 'search robots'\r\n\t\t\tonChange = {SearchField}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\nconst Scroll = (props) =>{\r\n\treturn(\r\n\t\t<div style = {{overflow : 'scroll', border: '5px solid black', height: '800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport CardList from '../component/CardList';\r\nimport SearchBox from '../component/SearchBox';\r\n//import {robots} from './Robot.js';\r\nimport './App.css';\r\nimport Scroll from '../component/Scroll';\r\n\r\n\r\nclass App extends React.Component {\r\n\tconstructor(){\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\trobots:[],\r\n\t\t\tsearchField:''\r\n\t\t}\r\n\t}\r\n\tonChangeevent = (event)=>{\r\n\t\tthis.setState({searchField: event.target.value});\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t  .then(response => response.json())\r\n\t\t  .then(users => this.setState({robots: users}));\r\n\t}\r\n\r\n\trender(){\r\n\t\tconst {robots, searchField} = this.state;\r\n\t\tconst filterCase = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t})\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t<SearchBox SearchField = {this.onChangeevent}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<CardList robots = {filterCase}/>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nimport App from './containers/App';\n\nReactDOM.render(\n\t\t<App />\n  ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}